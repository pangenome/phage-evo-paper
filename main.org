#+TITLE: Main file of the phage repo
#+AUTHOR: Hugo Ávila (@bioinformagica)
#+LANGUAGE: en-us
#+STARTUP: overview
#+PROPERTY: header-args :dir ~/projects/phage-evo-paper :mkdirp yes :exports none :eval never-export

* ENV setup
** Snakemake
#+BEGIN_SRC shell
# get conda installer
wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh

# Run installer and interactively accept and init the conda executable
# Atention !!!: this will change your current shell .rc (.zshrc, .bashrc ...)
bash Miniconda3-latest-Linux-x86_64.sh

# Source the conda changes
source ~/.bashrc

# Set auto activation of conda base environment to false
conda config --set auto_activate_base false

# Add channels
conda config --add channels conda-forge
conda config --add channels bioconda

# Install mamba
conda install -n base -c conda-forge mamba -y

# Install Snakemake
mamba create -c conda-forge -c bioconda -n snakemake snakemake -y

#+END_SRC

#+RESULTS:

* Snakemake workflow template
#+NAME: cb:get-snakemake-template
#+CAPTION: Clone the Snakemake Template
#+BEGIN_SRC shell
git clone https://github.com/snakemake-workflows/snakemake-workflow-template .
rm -rf .git
git init && git commit --allow-empty -m "Initial Commit."
#+END_SRC

* TODO README.md [25%]
#+NAME: cb:README.md
#+CAPTION: README.md
#+BEGIN_SRC markdown :tangle README.md
# Snakemake workflow: `phage-evo-paper`

[![Snakemake](https://img.shields.io/badge/snakemake-≥6.3.0-brightgreen.svg)](https://snakemake.github.io)

A Snakemake workflow for `Phage directed evolution analysis`.
#+END_SRC
** DONE Create README.md
** TODO Create linter action
* TODO Snakefile [12%]
:PROPERTIES:
:COOKIE_DATA: todo recursive
:header-args: :tangle workflow/Snakefile :mkdirp yes :exports none :eval never-export :comments link
:END:
** IMPORTS
#+BEGIN_SRC snakemake
import os
import sys
from operator import itemgetter as itget
#+END_SRC

** FILE CONFIGS
#+BEGIN_SRC snakemake
configfile: 'config/config.yaml'
#+END_SRC

** FUNCTIONS
#+BEGIN_SRC snakemake
get_cores_perc = lambda perc: max(1, workflow.cores * perc)
join_path = lambda *args: os.path.join(*args)
#+END_SRC
** GLOBAL VARIABLES
#+BEGIN_SRC snakemake
output_dirs = config['outputs']
snakefile_path = os.path.dirname(workflow.snakefile)
SAMPLES=list(map(lambda x: os.path.basename(x.path).replace('.fastq',''), filter(lambda x: x.path.endswith('fastq'), os.scandir(config['reads']))))[:2]
minia_prefix="outputs/assemblies/minia/minia.k{}.a{}".format(*itget("kmer","abundance")(config['params']['minia']))
pggb_prefix=".p{}.s{}.n{}".format(*itget("map-pct-id", "n-mappings","segment-length")(config['params']['pggb']))
#+END_SRC

** RULES
*** ALL
#+BEGIN_SRC snakemake
rule all:
    input:
        # reads_sets=expand(config['data']+'/merged.{status}.filtering.fastq', status=('before','after')),
        nanoplot_out=expand(itget('before','after')(output_dirs['nanoplot'])),
        pggb_dirs=expand("outputs/pggb/{graph}"+pggb_prefix, graph=("miniasm","minipolish","minia"))
        # figures=expand(join_path('outputs','bandage')+"/{graph}.svg", graph=("miniasm","minipolish","minia")),
        # miniasm_graphaligner = join_path(config['outputs']['assemblies']['miniasm'], "miniasm.graphaligner.polished.fa"),
        # minipolish_polished=join_path(config['outputs']['assemblies']['miniasm'], "miniasm.minipolish.polished.fa"),
        # minia_assembly_gfa_polished=minia_prefix+'.contigs.polished.fa'
        # miniasm_assembly="outputs/assemblies/miniasm/miniasm.polished.gfa",
#+END_SRC
*** Merge reads
#+BEGIN_SRC snakemake
rule merged_reads:
    input:
        expand(config['reads']+'/{sample}.fastq', sample=SAMPLES)
    output:
        config['data']+'/merged.before.filtering.fastq'
    shell:
        "cat {input} > {output}"
#+END_SRC

*** NANOPLOT
Get some quality check data (mostly read length distribution):
#+BEGIN_SRC snakemake
rule nanoplot:
    input:
        config['data']+"/merged.{status}.filtering.fastq"
    output:
        directory("outputs/nanoplot/{status}_filter")
    threads:
        get_cores_perc(0.5)
    conda:
        "envs/nanoplot_env.yaml"
    shell:
        "NanoPlot -t {threads} --plots dot -o {output} --fastq {input}"
#+END_SRC

*** FILTER READS
#+BEGIN_SRC snakemake
rule filter_reads:
    input:
        config['data']+'/merged.before.filtering.fastq'
    output:
        config['data']+'/merged.after.filtering.fastq'
    params:
        **config['params']['filtlong']
    conda:
        "envs/filtlong_env.yaml"
    shell:
        "filtlong --min_length {params.min_length} --keep_percent {params.keep_percent} {input} > {output} "
#+END_SRC

*** MINIA3
Genome assembly with [[https:https://github.com/GATB/minia][minia3]]:
#+BEGIN_SRC snakemake
rule minia:
    input:
        config['data']+'/merged.after.filtering.fastq'
    output:
        minia_assembly=minia_prefix+".contigs.fa"
    threads:
        get_cores_perc(0.5)
    params:
        **config['params']['minia'],
        prefix_fasta=minia_prefix
    conda:
        'envs/minia_env.yaml'
    shell:
        "minia -nb-cores {threads} -kmer-size {params.kmer} -abundance-min {params.abundance} -out {params.prefix_fasta} -in {input}"
#+END_SRC

*** FASTA_TO_GFA
#+BEGIN_SRC snakemake
rule minia_fasta_to_gfa:
    input:
        minia_assembly=minia_prefix+".contigs.fa",
        script=join_path(snakefile_path, 'scripts', 'convertToGFA.py'),
    output:
        minia_assembly_gfa=minia_prefix+'.contigs.gfa'
    params:
        **config['params']['minia'],
    conda:
        'envs/minia_env.yaml'
    shell:
        "python {input.script} {input.minia_assembly} {output.minia_assembly_gfa} {params.kmer}"
#+END_SRC

*** MINIMAP
#+BEGIN_SRC snakemake
rule overlap_filtered_reads:
    conda:
        'envs/miniasm_env.yaml'
    input:
        filtlong_reads = config['data']+'/merged.after.filtering.fastq'
    output:
        overlaped_reads = join_path(config['outputs']['assemblies']['miniasm'], "overlap.20Kb.paf")
    threads:
        get_cores_perc(0.5)
    shell:
        "minimap2 -x ava-ont -t {threads} {input.filtlong_reads} {input.filtlong_reads} > {output.overlaped_reads}"
#+END_SRC

*** MINIASM
#+BEGIN_SRC snakemake
rule miniasm_assembly:
    input:
        filtlong_reads = config['data']+'/merged.after.filtering.fastq',
        overlaped_reads = join_path(config['outputs']['assemblies']['miniasm'], "overlap.20Kb.paf")
    output:
        miniasm_unpolished = join_path(config['outputs']['assemblies']['miniasm'], "miniasm.unpolished.gfa")
    conda:
        'envs/miniasm_env.yaml'
    threads:
        get_cores_perc(0.2)
    shell:
        "miniasm -f {input.filtlong_reads} {input.overlaped_reads} > {output.miniasm_unpolished}"
#+END_SRC

*** MINIPOLISH
#+BEGIN_SRC snakemake
rule polishing_miniasm_minipolish:
    input:
        filtlong_reads = config['data']+'/merged.after.filtering.fastq',
        miniasm_unpolished = join_path(config['outputs']['assemblies']['miniasm'], "miniasm.unpolished.gfa")
    output:
        miniasm_minipolish = join_path(config['outputs']['assemblies']['miniasm'], "miniasm.minipolish.gfa")
    threads:
        get_cores_perc(0.5)
    conda:
        'envs/miniasm_env.yaml'
    shell:
        "minipolish --threads {threads} {input.filtlong_reads} {input.miniasm_unpolished} > {output.miniasm_minipolish}"
#+END_SRC

*** Graphaligner miniasm
#+BEGIN_SRC snakemake
rule polishing_graphaligner_miniasm:
    conda:
        'envs/graphaligner_env.yaml'
    input:
        raw_reads=config['data']+'/merged.before.filtering.fastq',
        miniasm_unpolished = join_path(config['outputs']['assemblies']['miniasm'], "miniasm.unpolished.gfa")
    output:
        miniasm_graphaligner = join_path(config['outputs']['assemblies']['miniasm'], "miniasm.graphaligner.polished.fa"),
        gf_gaf=join_path(config['outputs']['assemblies']['miniasm'], "miniasm.graphaligner.gaf"),
    threads:
        get_cores_perc(0.5)
    params:
        dbtype = "vg",
        seed_minimizer = 15
    shell:
        "GraphAligner -g {input.miniasm_unpolished} -f {input.raw_reads} -x {params.dbtype} --threads {threads} --seeds-minimizer-length {params.seed_minimizer} --seeds-minimizer-windowsize {params.seed_minimizer} -a {output.gf_gaf} --corrected-out {output.miniasm_graphaligner}"
#+END_SRC

*** Graphaligner minipolish
#+BEGIN_SRC snakemake
rule polishing_graphaligner_minipolish:
    conda:
        'envs/graphaligner_env.yaml'
    input:
        raw_reads=config['data']+'/merged.before.filtering.fastq',
        miniasm_minipolish = join_path(config['outputs']['assemblies']['miniasm'], "miniasm.minipolish.gfa")
    output:
        minipolish_gaf=join_path(config['outputs']['assemblies']['miniasm'], "miniasm.minipolish.polished.gaf"),
        minipolish_polished=join_path(config['outputs']['assemblies']['miniasm'], "miniasm.minipolish.polished.fa")
    threads:
        get_cores_perc(0.5)
    params:
        dbtype = "vg",
        seed_minimizer = 15
    shell:
        "GraphAligner -g {input.miniasm_minipolish} -f {input.raw_reads} -x {params.dbtype} --threads {threads} --seeds-minimizer-length {params.seed_minimizer} --seeds-minimizer-windowsize {params.seed_minimizer} -a {output.minipolish_gaf} --corrected-out {output.minipolish_polished}"
#+END_SRC

*** Graphaligner MINIA
#+BEGIN_SRC snakemake
rule polishing_graphaligner_minia:
    conda:
        'envs/graphaligner_env.yaml'
    input:
        raw_reads=config['data']+'/merged.before.filtering.fastq',
        minia_assembly_gfa=minia_prefix+'.contigs.gfa'
    output:
        minia_gaf=minia_prefix+'.contigs.gaf',
        minia_assembly_gfa_polished=minia_prefix+'.contigs.polished.fa'
    threads:
        get_cores_perc(0.5)
    params:
        dbtype = "vg",
        seed_minimizer = 15
    shell:
        "GraphAligner -g {input.minia_assembly_gfa} -f {input.raw_reads} -x {params.dbtype} --threads {threads} --seeds-minimizer-length {params.seed_minimizer} --seeds-minimizer-windowsize {params.seed_minimizer} -a {output.minia_gaf} --corrected-out {output.minia_assembly_gfa_polished}"
#+END_SRC

*** PGGB miniasm_polished
#+BEGIN_SRC snakemake
rule pggb_miniasm:
    input:
        corrected_reads=join_path(config['outputs']['assemblies']['miniasm'], "miniasm.graphaligner.polished.fa"),
    output:
        directory("outputs/pggb/miniasm"+pggb_prefix)
    params:
        ,**config['params']['pggb']
    conda:
        'envs/pggb_env.yaml'
    shell:
        "pggb --input-fasta {input.corrected_reads} --map-pct-id {params.map-pct-id} --n-mappings {params.n-mappings} --segment-length {params.segment-length} --output-dir {output}"
#+END_SRC

*** PGGB minipolish_polished
#+BEGIN_SRC snakemake
rule pggb_minipolish:
    input:
        corrected_reads=join_path(config['outputs']['assemblies']['miniasm'], "miniasm.minipolish.polished.fa")
    output:
        directory("outputs/pggb/minipolish"+pggb_prefix)
    params:
        ,**config['params']['pggb']
    conda:
        'envs/pggb_env.yaml'
    shell:
        "pggb --input-fasta {input.corrected_reads} --map-pct-id {params.map-pct-id} --n-mappings {params.n-mappings} --segment-length {params.segment-length} --output-dir {output}"
#+END_SRC
*** PGGB minia_polished
#+BEGIN_SRC snakemake
rule pggb_minia:
    input:
        corrected_reads=minia_prefix+'.contigs.polished.fa'
    output:
        directory("outputs/pggb/minia"+pggb_prefix)
    params:
        ,**config['params']['pggb']
    conda:
        'envs/pggb_env.yaml'
    shell:
        "pggb --input-fasta {input.corrected_reads} --map-pct-id {params.map-pct-id} --n-mappings {params.n-mappings} --segment-length {params.segment-length} --output-dir {output}"
#+END_SRC

** TODO Create Rules [1/7]
*** DONE Nanoplot
*** TODO VeChat
*** HOLD Minia3
*** TODO GraphAligner
*** TODO pggb
*** TODO odgi
*** TODO Bonito ???
* CONFIGS
:PROPERTIES:
:COOKIE_DATA: todo recursive
:header-args: :tangle config/config.yaml :mkdirp yes :exports none :eval never-export :comments link
:END:
#+BEGIN_SRC yaml
data: 'data'

# Input
reads: 'data/fastq'
parental_phages: 'data/genomes/phage/parental.phage.merged.fasta'

# Outputs
outputs:
  nanoplot:
    before: 'outputs/nanoplot/before_filter'
    after: 'outputs/nanoplot/after_filter'
  assemblies:
    minia: 'outputs/assemblies/minia'
    miniasm: 'outputs/assemblies/miniasm'

# PARAMETERS

# minia
params:
  minia:
    kmer: 21
    abundance: 7
  filtlong:
    keep_percent: 98
    min_length: 20_000
  pggb:
    map-pct-id: 90
    n-mappings: 100
    segment-length: 1_000
#+END_SRC
* ENVS
:PROPERTIES:
:COOKIE_DATA: todo recursive
:header-args: :mkdirp yes :exports none :eval never-export
:END:

#+NAME: get-env-yaml
#+CAPTION: Creates yaml files from conda envs
#+BEGIN_SRC shell :results org replace
declare -a envs=(
    "nanoplot_env"
    "minia_env"
    "kmergenie_env"
)

envs_dir="workflow/envs"
mkdir -p "${envs_dir}"

for env in "${envs[@]}"; do
    fname="${envs_dir}/${env}.yaml"
    [ -f "${fname}" ] && continue
    mamba env export -n "${env}" >"${fname}" 2>/dev/null
done

ls -v1 "${envs_dir}/"*yaml |
    xargs -I'{}' echo "DONE: {}"
#+END_SRC

#+RESULTS: get-env-yaml
#+begin_src org
DONE: workflow/envs/kmergenie_env.yaml
DONE: workflow/envs/minia_env.yaml
DONE: workflow/envs/nanoplot_env.yaml
#+end_src
