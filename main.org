#+TITLE: Main file of the phage repo
#+AUTHOR: Hugo Ávila (@bioinformagica)
#+LANGUAGE: en-us
#+STARTUP: overview
#+PROPERTY: header-args :dir ~/projects/phage-evo-paper :mkdirp yes :exports none :eval never-export

* ENV setup
** Snakemake
#+BEGIN_SRC shell
# get conda installer
wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh

# Run installer and interactively accept and init the conda executable
# Atention !!!: this will change your current shell .rc (.zshrc, .bashrc ...)
bash Miniconda3-latest-Linux-x86_64.sh

# Source the conda changes
source ~/.bashrc

# Set auto activation of conda base environment to false
conda config --set auto_activate_base false

# Add channels
conda config --add channels conda-forge
conda config --add channels bioconda

# Install mamba
conda install -n base -c conda-forge mamba -y

# Install Snakemake
mamba create -c conda-forge -c bioconda -n snakemake snakemake -y

#+END_SRC

#+RESULTS:

* Snakemake workflow template
#+NAME: cb:get-snakemake-template
#+CAPTION: Clone the Snakemake Template
#+BEGIN_SRC shell
git clone https://github.com/snakemake-workflows/snakemake-workflow-template .
rm -rf .git
git init && git commit --allow-empty -m "Initial Commit."
#+END_SRC

* TODO README.md [25%]
#+NAME: cb:README.md
#+CAPTION: README.md
#+BEGIN_SRC markdown :tangle README.md
# Snakemake workflow: `phage-evo-paper`

[![Snakemake](https://img.shields.io/badge/snakemake-≥6.3.0-brightgreen.svg)](https://snakemake.github.io)

A Snakemake workflow for `Phage directed evolution analysis`.
#+END_SRC
** DONE Create README.md
** TODO Create linter action
* TODO Snakefile [25%]
:PROPERTIES:
:COOKIE_DATA: todo recursive
:header-args: :tangle workflow/Snakefile :mkdirp yes :exports none :eval never-export
:END:
** IMPORTS
#+BEGIN_SRC snakemake
import os
import sys
#+END_SRC

** FILE CONFIGS
#+BEGIN_SRC snakemake
configfile: 'config/config.yaml'
#+END_SRC

** GLOBAL VARIABLES
#+BEGIN_SRC snakemake
SAMPLES=list(map(lambda x: os.path.basename(x.path).replace('.fastq',''), filter(lambda x: x.path.endswith('fastq'), os.scandir(config['reads']))))
#+END_SRC

** RULES
*** ALL
#+BEGIN_SRC snakemake
rule all:
    input:
        # Nano plot
        nanoplot_out=config['nanoplot_out'],

        # kmergenie
        kmergenie_out=config['kmergenie_out'],
        best_kmer=config['kmergenie_out']+"/best_kmer.out",

        # Minia
        reads=expand( config['reads']+"/{sample}.fastq", sample=SAMPLES),
        minia_assemblies=expand(config['minia_out']+"/K{kmer}.fasta", kmer=config['kmers']),
#+END_SRC
*** KmerGenie
Pick the best (Kgenie best) K-mer size.
#+BEGIN_SRC snakemake
rule kmergenie:
    conda:
        "envs/kmergenie_env.yaml"
    threads:
        workflow.cores
    input:
        expand(config['reads']+"/{samples}.fastq", samples=SAMPLES)
    output:
        kmergenie_out=directory(config['kmergenie_out']),
        best_kmer=config['kmergenie_out']+"/best_kmer.out"
    shell:
        "kmergenie {input} -t {threads} -o {output.kmergenie_out}/ > {output.best_kmer}"

#+END_SRC

*** NANOPLOT
Get some quality check data (mostly read length distribution):
#+BEGIN_SRC snakemake
rule nanoplot:
    conda:
        "envs/nanoplot_env.yaml"
    input:
        expand(config['reads']+"/{samples}.fastq", samples=SAMPLES)
    output:
        directory(config['nanoplot_out'])
    threads:
        workflow.cores
    shell:
        """
        mkdir -p {output}
        NanoPlot -t {threads} --plots dot --output {output} --fastq {input}
        """
#+END_SRC
*** MINIA3
Genome assembly with [[https:https://github.com/GATB/minia][minia3]]:
#+BEGIN_SRC snakemake :exports none
rule minia:
    conda:
        'envs/minia_env.yaml'
    input:
        reads=expand(config['reads']+"/{samples}.fastq", samples=SAMPLES)
    params:
        kmer="{kmer}",
        in_arg= lambda wildcards, input: '-in '+' -in '.join(input.reads)
    threads:
        lambda cores: max(1, workflow.cores * 0.2)
    output:
        minia_assemblies=config['minia_out']+"/K{kmer}.fasta"
    shell:
        """
        minia -nb-cores {threads} -kmer-size {params.kmer} -abundance-min 10 -out {output.minia_assemblies} {params.in_arg}
        """
#+END_SRC

** TODO Create Rules [2/7]
*** TODO KmerGenie
*** DONE Nanoplot
*** DONE Minia3
*** TODO GraphAligner
*** TODO pggb
*** TODO odgi
*** TODO Bonito ???
* CONFIGS
:PROPERTIES:
:COOKIE_DATA: todo recursive
:header-args: :tangle config/config.yaml :mkdirp yes :exports none :eval never-export
:END:
** main file
#+BEGIN_SRC yaml
data: 'data'

# Input
reads: 'data/fastq'

# Outputs
minia_out: 'outputs/minia'
nanoplot_out: 'outputs/nanoplot'
kmergenie_out: 'outputs/kmergenie'

# parameters
kmers: [21,33,55,77,99,127]
largest_kmer: 250
#+END_SRC
* ENVS
:PROPERTIES:
:COOKIE_DATA: todo recursive
:header-args: :mkdirp yes :exports none :eval never-export
:END:

#+NAME: get-env-yaml
#+CAPTION: Creates yaml files from conda envs
#+BEGIN_SRC shell :results org replace
declare -a envs=(
    "nanoplot_env"
    "minia_env"
)

envs_dir="workflow/envs"
mkdir -p "${envs_dir}"

for env in "${envs[@]}"; do
    fname="${envs_dir}/${env}.yaml"
    [ -f "${fname}" ] && continue
    mamba env export -n "${env}" >"${fname}" 2>/dev/null
done

ls -v1 "${envs_dir}/"*yaml |
    xargs -I'{}' echo "DONE: {}"
#+END_SRC

#+RESULTS: get-env-yaml
#+begin_src org
DONE: workflow/envs/minia_env.yaml
DONE: workflow/envs/nanoplot_env.yaml
#+end_src
