#+TITLE: Main file of the phage repo
#+AUTHOR: Hugo Ávila (@bioinformagica)
#+LANGUAGE: en-us
#+STARTUP: overview
#+PROPERTY: header-args :dir ~/projects/phage-evo-paper :mkdirp yes :exports none :eval never-export

* ENV setup
** Snakemake
#+BEGIN_SRC shell
# get conda installer
wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh

# Run installer and interactively accept and init the conda executable
# Atention !!!: this will change your current shell .rc (.zshrc, .bashrc ...)
bash Miniconda3-latest-Linux-x86_64.sh

# Source the conda changes
source ~/.bashrc

# Set auto activation of conda base environment to false
conda config --set auto_activate_base false

# Add channels
conda config --add channels conda-forge
conda config --add channels bioconda

# Install mamba
conda install -n base -c conda-forge mamba -y

# Install Snakemake
mamba create -c conda-forge -c bioconda -n snakemake snakemake -y

#+END_SRC

#+RESULTS:

* Snakemake workflow template
#+NAME: cb:get-snakemake-template
#+CAPTION: Clone the Snakemake Template
#+BEGIN_SRC shell
git clone https://github.com/snakemake-workflows/snakemake-workflow-template .
rm -rf .git
git init && git commit --allow-empty -m "Initial Commit."
#+END_SRC

* TODO README.md [25%]
#+NAME: cb:README.md
#+CAPTION: README.md
#+BEGIN_SRC markdown :tangle README.md
# Snakemake workflow: `phage-evo-paper`

[![Snakemake](https://img.shields.io/badge/snakemake-≥6.3.0-brightgreen.svg)](https://snakemake.github.io)

A Snakemake workflow for `Phage directed evolution analysis`.
#+END_SRC
** DONE Create README.md
** TODO Create linter action
* TODO Snakefile [12%]
:PROPERTIES:
:COOKIE_DATA: todo recursive
:header-args: :tangle workflow/Snakefile :mkdirp yes :exports none :eval never-export
:END:
** IMPORTS
#+BEGIN_SRC snakemake
import os
import sys
from operator import itemgetter as itget
#+END_SRC

** FILE CONFIGS
#+BEGIN_SRC snakemake
configfile: 'config/config.yaml'
#+END_SRC

** FUNCTIONS
#+BEGIN_SRC snakemake
get_cores_perc = lambda core: max(1, workflow.cores)
#+END_SRC
** GLOBAL VARIABLES
#+BEGIN_SRC snakemake
output_dirs = config['outputs']
SAMPLES=list(map(lambda x: os.path.basename(x.path).replace('.fastq',''), filter(lambda x: x.path.endswith('fastq'), os.scandir(config['reads']))))
#+END_SRC

** RULES
*** ALL
#+BEGIN_SRC snakemake
rule all:
    input:
        reads_sets=expand(config['data']+'/merged.{status}.filtering.fastq', status=('before','after')),
        nanoplot_out=expand(itget('before','after')(output_dirs['nanoplot'])),
        minia_assembly="outputs/assemblies/minia/minia.k21.a7.contigs.fa",
        miniasm_assembly="outputs/assemblies/miniasm/miniasm.polished.gfa"
#+END_SRC
*** Merge reads
#+BEGIN_SRC snakemake
rule merged_reads:
    input:
        expand(config['reads']+'/{sample}.fastq', sample=SAMPLES)
    output:
        config['data']+'/merged.before.filtering.fastq'
    shell:
        "cat {input} > {output}"
#+END_SRC

*** NANOPLOT
Get some quality check data (mostly read length distribution):
#+BEGIN_SRC snakemake
rule nanoplot:
    input:
        # reads_sets=expand(config['data']+'/merged.{status}.filtering.fastq', status=('before','after')),
        config['data']+"/merged.{status}.filtering.fastq"
    output:
        "outputs/nanoplot/{status}_filter"
    threads:
        workflow.cores
    conda:
        "envs/nanoplot_env.yaml"
    shell:
        "NanoPlot -t {threads} --plots dot -o {output} --fastq {input}"
#+END_SRC

*** FILTER READS
#+BEGIN_SRC snakemake
rule filter_reads:
    input:
        config['data']+'/merged.before.filtering.fastq'
    output:
        config['data']+'/merged.after.filtering.fastq'
    params:
        ,**config['params']['filtlong']
    conda:
        "envs/filtlong_env.yaml"
    shell:
        "filtlong --min_length {params.min_length} --keep_percent {params.keep_percent} {input} > {output} "
#+END_SRC

*** MINIA3
Genome assembly with [[https:https://github.com/GATB/minia][minia3]]:
#+BEGIN_SRC snakemake
rule minia:
    input:
        config['data']+'/merged.after.filtering.fastq'
    output:
        minia_assembly="outputs/assemblies/minia/minia.k21.a7.contigs.fa"
    params:
        ,**config['params']['minia']
    threads:
        get_cores_perc(0.5)
    conda:
        'envs/minia_env.yaml'
    shell:
        "minia -nb-cores {threads} -kmer-size {params.kmer} -abundance-min {params.abundance} -out outputs/assemblies/minia/minia.k21.a7 -in {input}"
#+END_SRC

*** MINIASM
#+BEGIN_SRC snakemake
rule miniasm_assembly:
    input:
        config['data']+'/merged.after.filtering.fastq'
    output:
        miniasm_assembly="outputs/assemblies/miniasm/miniasm.polished.gfa"
    conda:
        'envs/miniasm_env.yaml'
    threads:
        get_cores_perc(0.5)
    shell:
        "miniasm_and_minipolish.sh {input} {threads} > {output.miniasm_assembly}"
#+END_SRC

** TODO Create Rules [1/7]
*** DONE Nanoplot
*** TODO VeChat
*** HOLD Minia3
*** TODO GraphAligner
*** TODO pggb
*** TODO odgi
*** TODO Bonito ???
* CONFIGS
:PROPERTIES:
:COOKIE_DATA: todo recursive
:header-args: :tangle config/config.yaml :mkdirp yes :exports none :eval never-export
:END:
** main file
#+BEGIN_SRC yaml
data: 'data'

# Input
reads: 'data/fastq'

# Outputs
outputs:
  nanoplot:
    before:
      'outputs/nanoplot/before_filter'
    after:
      'outputs/nanoplot/after_filter'

assemblies:
  minia: 'outputs/assemblies/minia'
  miniasm: 'outputs/assemblies/miniasm'

# PARAMETERS

# minia
params:
  minia:
    kmer: 21
    abundance: 10
  filtlong:
    min_length: 1000
    keep_percent: 95

#+END_SRC
* ENVS
:PROPERTIES:
:COOKIE_DATA: todo recursive
:header-args: :mkdirp yes :exports none :eval never-export
:END:

#+NAME: get-env-yaml
#+CAPTION: Creates yaml files from conda envs
#+BEGIN_SRC shell :results org replace
declare -a envs=(
    "nanoplot_env"
    "minia_env"
    "kmergenie_env"
)

envs_dir="workflow/envs"
mkdir -p "${envs_dir}"

for env in "${envs[@]}"; do
    fname="${envs_dir}/${env}.yaml"
    [ -f "${fname}" ] && continue
    mamba env export -n "${env}" >"${fname}" 2>/dev/null
done

ls -v1 "${envs_dir}/"*yaml |
    xargs -I'{}' echo "DONE: {}"
#+END_SRC

#+RESULTS: get-env-yaml
#+begin_src org
DONE: workflow/envs/kmergenie_env.yaml
DONE: workflow/envs/minia_env.yaml
DONE: workflow/envs/nanoplot_env.yaml
#+end_src
