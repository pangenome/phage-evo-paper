import os
import sys

configfile: 'config/config.yaml'

SAMPLES=list(map(lambda x: os.path.basename(x.path).replace('.fastq',''), filter(lambda x: x.path.endswith('fastq'), os.scandir(config['reads']))))

rule all:
    input:
        merged_reads=config['data']+'/all.reads.fastq',
        nanoplot_out=config['nanoplot_out'],
        vechat_fasta=config['vechat_out']+"/all.passages.reads.corrected.fa"

rule merged_reads:
    input:
        reads=expand( config['reads']+"/{sample}.fastq", sample=SAMPLES)
    output:
        merged_reads=config['data']+'/all.reads.fastq',
    shell:
        "cat {input.reads} > {output.merged_reads}"

rule nanoplot:
    conda:
        "envs/nanoplot_env.yaml"
    input:
        merged_reads=config['data']+'/all.reads.fastq',
    output:
        nanoplot_out=directory(config['nanoplot_out'])
    threads:
        workflow.cores
    shell:
        """
        mkdir -p {output}
        NanoPlot -t {threads} --plots dot --output {output.nanoplot_out} --fastq {input.merged_reads}
        """

rule error_correction:
    input:
        merged_reads=config['data']+'/all.reads.fastq',
    output:
        vechat_fasta=config['vechat_out']+"/all.passages.reads.corrected.fa"
    threads:
        workflow.cores
    conda:
        'envs/vechat_env.yaml'
    shell:
        "vechat {input.merged_reads} -t {threads} --platform ont -o {output.vechat_fasta}"

# rule minia:
#     conda:
#         'envs/minia_env.yaml'
#     input:
#         reads=expand(config['reads']+"/{samples}.fastq", samples=SAMPLES)
#     params:
#         kmer="{kmer}",
#         in_arg= lambda wildcards, input: '-in '+' -in '.join(input.reads)
#     threads:
#         lambda cores: max(1, workflow.cores * 0.2)
#     output:
#         minia_assemblies=config['minia_out']+"/K{kmer}.fasta"
#     shell:
#         """
#         minia -nb-cores {threads} -kmer-size {params.kmer} -abundance-min 10 -out {output.minia_assemblies} {params.in_arg}
#         """
