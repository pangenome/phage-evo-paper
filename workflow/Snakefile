import os
import sys
from operator import itemgetter as itget

configfile: 'config/config.yaml'

get_cores_perc = lambda perc: max(1, workflow.cores * perc)

output_dirs = config['outputs']
SAMPLES=list(map(lambda x: os.path.basename(x.path).replace('.fastq',''), filter(lambda x: x.path.endswith('fastq'), os.scandir(config['reads']))))

rule all:
    input:
        reads_sets=expand(config['data']+'/merged.{status}.filtering.fastq', status=('before','after')),
        nanoplot_out=expand(itget('before','after')(output_dirs['nanoplot'])),
        minia_assembly="outputs/assemblies/minia/minia.k21.a7.contigs.fa",
        miniasm_assembly="outputs/assemblies/miniasm/miniasm.polished.gfa",
        minia_assembly_gfa="outputs/assemblies/minia/minia.k21.a7.contigs.gfa"

rule merged_reads:
    input:
        expand(config['reads']+'/{sample}.fastq', sample=SAMPLES)
    output:
        config['data']+'/merged.before.filtering.fastq'
    shell:
        "cat {input} > {output}"

rule nanoplot:
    input:
        # reads_sets=expand(config['data']+'/merged.{status}.filtering.fastq', status=('before','after')),
        config['data']+"/merged.{status}.filtering.fastq"
    output:
        directory("outputs/nanoplot/{status}_filter")
    threads:
        get_cores_perc(0.5)
    conda:
        "envs/nanoplot_env.yaml"
    shell:
        "NanoPlot -t {threads} --plots dot -o {output} --fastq {input}"

rule filter_reads:
    input:
        config['data']+'/merged.before.filtering.fastq'
    output:
        config['data']+'/merged.after.filtering.fastq'
    params:
        **config['params']['filtlong']
    conda:
        "envs/filtlong_env.yaml"
    shell:
        "filtlong --min_length {params.min_length} --keep_percent {params.keep_percent} {input} > {output} "

rule minia:
    input:
        config['data']+'/merged.after.filtering.fastq'
    output:
        minia_assembly="outputs/assemblies/minia/minia.k21.a7.contigs.fa"
    params:
        **config['params']['minia']
    threads:
        get_cores_perc(0.5)
    conda:
        'envs/minia_env.yaml'
    shell:
        "minia -nb-cores {threads} -kmer-size {params.kmer} -abundance-min {params.abundance} -out outputs/assemblies/minia/minia.k21.a7 -in {input}"

		
rule minia_fasta_to_gfa:
    input:
        minia_assembly="outputs/assemblies/minia/minia.k21.a7.contigs.fa",
	script=os.path.join(os.path.dirname(workflow.snakefile),'scripts', 'convertToGFA.py')
    output:
        minia_assembly_gfa="outputs/assemblies/minia/minia.k21.a7.contigs.gfa"
    params:
        **config['params']['minia']
    conda:
        'envs/minia_env.yaml'
    shell:
        "python {input.script} {input.minia_assembly} {output.minia_assembly_gfa} {params.kmer}"



