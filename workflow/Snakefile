# [[file:../main.org::*IMPORTS][IMPORTS:1]]
import os
import sys
from operator import itemgetter as itget
import glob
# IMPORTS:1 ends here

# [[file:../main.org::*FILE CONFIGS][FILE CONFIGS:1]]
configfile: 'config/config.yaml'
# FILE CONFIGS:1 ends here

# [[file:../main.org::*FUNCTIONS][FUNCTIONS:1]]
get_cores_perc = lambda perc: max(1, workflow.cores * perc)
join_path = lambda *args: os.path.join(*args)
get_Kbs = lambda x: int(x/1_000)

def get_current_HEAD_hash(default='unnamed'):
    shell_CL = "git show-ref --head --heads --abbrev | grep HEAD | awk '{print $1}'"
    with os.popen(shell_CL) as f:
        git_hash = f.read().strip()
        if re.match('^[\w\d]{7}$', git_hash):
            return git_hash
        return default
# FUNCTIONS:1 ends here

# [[file:../main.org::*GLOBAL VARIABLES][GLOBAL VARIABLES:1]]
snakefile_path = os.path.dirname(workflow.snakefile)

SAMPLES, = glob_wildcards(join_path(config['data']['reads'], '{sample}' + config['reads_suffix']))

# results_dir = config.get('results_dir', 'results')
results_dir = join_path('results', get_current_HEAD_hash())
# GLOBAL VARIABLES:1 ends here

# [[file:../main.org::*MAIN RULE ALL][MAIN RULE ALL:1]]
rule all:
    input:
        plot_dir = expand(join_path(results_dir, 'nanoplot', '{sample}'), sample=SAMPLES),
        putative_phage_genomes_polished = expand(join_path(results_dir, 'minia', '{sample}', '{sample}' + '.putative_phage_genomes' + '.polished' + '.prefixed' + '.fa.gz'), sample=SAMPLES),
        pggb_input = join_path(results_dir, 'pggb', 'genomes.sample_' + str(config['sample_size']) + '_from_each_passage.fa.gz')
# MAIN RULE ALL:1 ends here

# [[file:../main.org::*Include][Include:1]]
include:
    'rules/processing_all_samples.smk'
# Include:1 ends here
