import os
import sys

configfile: 'config/config.yaml'

SAMPLES=list(map(lambda x: os.path.basename(x.path).replace('.fastq',''), filter(lambda x: x.path.endswith('fastq'), os.scandir(config['reads']))))

rule all:
    input:
        merged_reads=config['data']+'/all.reads.fastq',
        nanoplot_out=config['nanoplot_out'],
        reads=expand(config['reads']+'/{sample}.fastq', sample=SAMPLES),
        miniasm_assembly=expand("outputs/assemblies/miniasm/{sample}.polished.gfa", sample=SAMPLES)
        # minia_assemby="outputs/assemblies/minia/minia.k{params.kmer}.fasta",

rule merged_reads:
    input:
        reads=expand( config['reads']+"/{sample}.fastq", sample=SAMPLES)
    output:
        merged_reads=config['data']+'/all.reads.fastq',
    shell:
        "cat {input.reads} > {output.merged_reads}"

rule nanoplot:
    conda:
        "envs/nanoplot_env.yaml"
    input:
        merged_reads=config['data']+'/all.reads.fastq',
    output:
        nanoplot_out=directory(config['nanoplot_out'])
    threads:
        workflow.cores
    shell:
        "NanoPlot -t {threads} --plots dot -o {output.nanoplot_out} --fastq {input.merged_reads}"

# rule minia:
#     conda:
#         'envs/minia_env.yaml'
#     input:
#         merged_reads=config['data']+'/all.reads.fastq',
#     params:
#         kmer=21,
#         abundance=3,
#     threads:
#         workflow.cores
#     output:
#         minia_assemblie=config['minia_out']+"/minia.k{params.kmer}.fasta"
#     shell:
#         "minia -nb-cores {threads} -kmer-size {params.kmer} -abundance-min {params.abundance} -out {output.minia_assemblie} -in {input.merged_reads}"

rule miniasm_assembly:
    input:
        config['reads']+'/{sample}.fastq'
    output:
        "outputs/assemblies/miniasm/{sample}.polished.gfa"
    conda:
        'envs/miniasm_env.yaml'
    threads:
        workflow.cores
    shell:
        "miniasm_and_minipolish.sh {input} {threads} > {output}"
