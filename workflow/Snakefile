# [[file:../main.org::*IMPORTS][IMPORTS:1]]
import os
import sys
from operator import itemgetter as itget
# IMPORTS:1 ends here

# [[file:../main.org::*FILE CONFIGS][FILE CONFIGS:1]]
configfile: 'config/config.yaml'
# FILE CONFIGS:1 ends here

# [[file:../main.org::*FUNCTIONS][FUNCTIONS:1]]
get_cores_perc = lambda perc: max(1, workflow.cores * perc)
join_path = lambda *args: os.path.join(*args)
get_Kbs = lambda x: int(x/1_000)
# FUNCTIONS:1 ends here

# [[file:../main.org::*GLOBAL VARIABLES][GLOBAL VARIABLES:1]]
output_dirs = config['outputs']
snakefile_path = os.path.dirname(workflow.snakefile)
# SAMPLES=list(map(lambda x: os.path.basename(x.path).replace('.fastq',''), filter(lambda x: x.path.endswith('fastq'), os.scandir(config['reads']))))

# Prefixes
minia_prefix="outputs/assemblies/minia/minia.k{}.a{}".format(*itget("kmer","abundance")(config['params']['minia']))
pggb_prefix=".p{}.s{}.l{}".format(*itget("map_pct_id", "segment_length", "block_length")(config['params']['pggb']))

# Suffixes
filter_contigs_prefix = minia_prefix + '.min{}Kb.max{}Kb'.format(*iter(map(get_Kbs, itget('min_contig_lenght', 'max_contig_lenght')(config['params']['minia']))))

SAMPLES, = glob_wildcards(join_path(config['data']['reads'], '{sample}.merged.fastq'))
# GLOBAL VARIABLES:1 ends here

# [[file:../main.org::*MAIN RULE ALL][MAIN RULE ALL:1]]
rule all:
    input:
        samples_prefixed_gzipped=expand(join_path(config['data']['reads'], 'P1-10.merged.prefixed.{state}.fastq.gz'), state=('before', 'after'))
# MAIN RULE ALL:1 ends here

# [[file:../main.org::*Include][Include:1]]
include:
    'rules/assembly_merged_reads.smk'
    # 'rules/assembly_each_passage_reads.smk'
# Include:1 ends here
